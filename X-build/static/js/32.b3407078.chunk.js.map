{"version":3,"sources":["components/vlounteers/AllMedia.js","components/vlounteers/volunteersPage.js"],"names":["AllMedia","props","useState","allMedia","setAllMedia","propsImages","images","propsvideos","videos","useEffect","fillMediaArray","length","map","image","push","type","id","name","video","class","slidesPerScroll","rtl","arrowLeft","className","style","margin","arrowRight","addArrowClickHandler","infinite","clickToChange","centered","breakpoints","1000","slidesPerPage","500","animationSpeed","media","mxaHeight","src","address","alt","height","controls","playIcon","url","Volunteers","volunteers","setVolunteers","setLength","t","useTranslation","loading","setLoading","a","window","fetch","fetcher","json","response","fetchData","Fragment","coverImage","undefined","i18n","language","model","htmlPageAr","htmlPageEn"],"mappings":"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","file":"static/js/32.b3407078.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport address from \"../utils/address\";\r\nimport Carousel from \"@brainhubeu/react-carousel\";\r\nimport \"@brainhubeu/react-carousel/lib/style.css\";\r\nimport ReactPlayer from 'react-player'\r\n\r\n/**\r\n * This Component put voulenteers Videos and images in one array and display carousal of both images and vedios\r\n * @param {props} props array of voulenteer s images and videos\r\n * @component\r\n */\r\nconst AllMedia =(props)=>{\r\nconst [allMedia , setAllMedia] = useState([])\r\nconst propsImages = props.images\r\nconst propsvideos = props.videos\r\n   \r\n   useEffect(() => {\r\n    \r\n    fillMediaArray(propsImages , propsvideos )\r\n \r\n      } , [props])\r\n/**\r\n * This function join videos array and images  array in one array, and add new attribute type 'image'/'video'  \r\n    * \r\n    */\r\n const fillMediaArray =(propsImages, propsvideos)=>{\r\n        let images = propsImages\r\n        let videos = propsvideos\r\n        let allMedia = []\r\n\r\n// fill allMedia array with  Image if its not empty\r\n\r\n\r\n    if(images.length > 0 )\r\n    {\r\n        images.map((image) =>{\r\n\r\n        allMedia.push({\r\n          type :'image',\r\n          id : image.id,\r\n          name : image.name\r\n        })\r\n      \r\n      })\r\n    }\r\n    // fill allMedia array with  videos if its not empty\r\n\r\n    if(videos.length > 0)\r\n    {\r\n        videos.map((video) =>{\r\n\r\n      allMedia.push({\r\n        type :'video',\r\n        id : video.id,\r\n        name : video.name\r\n      })\r\n    \r\n    })\r\n  }\r\n  setAllMedia(allMedia)\r\n }\r\n   \r\n    return (\r\n                 <div class=\"blog-posts single-post\">\r\n                  <article class=\"post clearfix mb-0\">\r\n                    <div class=\"entry-header\">\r\n                       {/**check if  all media length */}\r\n                     {allMedia.length > 0? \r\n                     (<Carousel  \r\n                          slidesPerScroll={1}\r\n                          //autoPlay={6000}\r\n                          rtl\r\n                          arrowLeft={\r\n                            <i\r\n                              className=\"fa fa-chevron-right fa-2x\"\r\n                              style={{ margin:\"10px\" }}\r\n                            />\r\n                          }\r\n                          arrowRight={\r\n                            <i\r\n                              className=\"fa fa-chevron-left fa-2x\"\r\n                              style={{ margin: \"10px\" }}\r\n                            />\r\n                          }\r\n                          addArrowClickHandler\r\n                          // animationSpeed={1000}\r\n                          infinite\r\n                          clickToChange\r\n                          centered\r\n                          breakpoints={{\r\n                            1000: {\r\n                              // these props will be applied when screen width is less than 1000px\r\n                              slidesPerPage: 2,\r\n                              clickToChange: false,\r\n                              centered: false,\r\n          \r\n                              infinite: false,\r\n                            },\r\n                            500: {\r\n                              slidesPerPage: 1,\r\n                              slidesPerScroll: 1,\r\n                              clickToChange: false,\r\n                              centered: false,\r\n                              animationSpeed: 2000,\r\n                              infinite: false,\r\n                            },\r\n                          }} >\r\n\r\n                  {allMedia.map((media) =>(\r\n                    media.type === 'image'?(\r\n                            <div\r\n                              class=\"post-thumb thumb\"\r\n                              style={{ mxaHeight: \"500px\" }} >\r\n                              <img\r\n                                src={`${address()}voulenter-page/${media.name}/image`}\r\n                                className=\"img-fullwidth img-responsive\"\r\n                                alt=\"\"\r\n                                style = {{height:'400px'}}\r\n                              />\r\n                            </div>\r\n                      ):\r\n                      (\r\n                        <div>\r\n                              \r\n                    \r\n                        <ReactPlayer \r\n                                      controls = {true}\r\n                                      playIcon\r\n                                      className=\"img-fullwidth img-responsive\"\r\n                                     \r\n                                      url = {`${address()}voulenter-page/${media.name}/video`}\r\n                                       />\r\n                        </div>\r\n                      )\r\n                        ))\r\n                  }\r\n                        \r\n                            </Carousel>):\r\n                            (\r\n                               <div>\r\n                                \r\n                              </div>\r\n                            )\r\n                      } \r\n                    \r\n                    </div>\r\n                    </article>\r\n                    </div>\r\n              \r\n       \r\n    );\r\n  }\r\n\r\nexport default AllMedia;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Header from '../sub_page_header';\r\nimport address from './../utils/address';\r\nimport i18n from 'i18next'\r\nimport { useTranslation } from 'react-i18next';\r\nimport 'froala-editor/js/froala_editor.pkgd.min.js';\r\nimport 'froala-editor/css/froala_style.min.css';\r\nimport 'froala-editor/css/froala_editor.pkgd.min.css';\r\nimport FroalaEditorView from 'react-froala-wysiwyg/FroalaEditorView';\r\nimport Preload from '../preload'\r\nimport AllMedia from './AllMedia'\r\n\r\n\r\n/**\r\n * This component display volunteers page\r\n * @component\r\n * @see http://sadagaat-uk.org/volunteers\r\n */\r\nconst Volunteers =()=>{\r\n  const [volunteers, setVolunteers] = useState([])\r\n  const [volunteerMedia , setVolunteerMedia] = useState([])\r\n  const [length , setLength]= useState(false)\r\n  const {t} = useTranslation()\r\n  const [loading , setLoading] = useState(true)\r\n\r\n/**\r\n * This function get volunteer page data from API\r\n */\r\n  async function fetchData() {\r\n    const fetcher = await window.fetch(`${address()}voulenter-page`)\r\n    const response = await fetcher.json()\r\n    setVolunteers(response)\r\n    setLoading(false)\r\n    //check if voluntees have images or videos \r\n    let length = response.images.length > 0 || response.video.length > 0 ? true : false\r\n    setLength(length)\r\n\r\n\r\n    \r\n  }\r\n  useEffect(() => {\r\n    \r\n       \r\n         fetchData()\r\n        }, [])\r\n\r\n\r\nreturn(\r\n  <React.Fragment>\r\n    <div>\r\n    <Header name={t('Volunteers')} coverImage = {'volunteer-bg-img'}/>\r\n    <section>\r\n \r\n          <div className=\"container mt-30 mb-30 pt-30 pb-30\">\r\n            <div class=\"row\">\r\n            {loading && \r\n                <Preload  loading = {loading}/>\r\n            } \r\n\r\n              <div class=\"col-md-6\">\r\n                {/* media carousal will not display if image and vedio undefined */}\r\n                {(volunteers.images !== undefined & volunteers.video !== undefined )&&\r\n                <AllMedia \r\n                images = {volunteers.images} \r\n                videos = {volunteers.video}/>\r\n                }\r\n                </div>\r\n                    <div class={`${(volunteers.images !== undefined & volunteers.video !== undefined & length)?'col-md-6':'col-md-12'}`}>\r\n\r\n                    <div class=\"entry-content\">\r\n                      <div class=\"entry-meta media no-bg no-border mt-15\">\r\n                        <div class=\"media-body pl-15\">\r\n                         \r\n\r\n                      <div className=\"m-15 mt-0\">\r\n                        {/* check language  */}\r\n                      {i18n.language === 'ar'?(\r\n                          <FroalaEditorView\r\n                            model={volunteers.htmlPageAr}\r\n                            />\r\n                          ):\r\n                          (<FroalaEditorView\r\n\r\n                            model={volunteers.htmlPageEn}\r\n                            />)\r\n                          }\r\n                      </div>\r\n                      </div>\r\n                      </div>\r\n                   \r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>  \r\n        </div>\r\n</React.Fragment>\r\n\r\n)\r\n\r\n}\r\n\r\nexport default Volunteers;"],"sourceRoot":""}