{"version":3,"sources":["components/events/single-event.jsx"],"names":["SinglEvent","fillMediaArray","event_images","state","event","images","event_videos","video","allMedia","length","map","image","push","type","id","name","setState","this","props","match","params","event_id","axios","get","address","headers","i18n","language","then","response","data","catch","error","console","log","message","t","class","coverImage","slidesPerScroll","rtl","arrowLeft","className","style","margin","arrowRight","addArrowClickHandler","infinite","clickToChange","centered","breakpoints","1000","slidesPerPage","500","animationSpeed","media","mxaHeight","src","alt","height","controls","playIcon","url","description","startDate","endDate","locationName","Component","withTranslation"],"mappings":"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","file":"static/js/28.558343ee.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Header from \"../sub_page_header\";\r\nimport address from \"../utils/address\";\r\nimport axios from \"axios\";\r\nimport i18n from \"i18next\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport Carousel from \"@brainhubeu/react-carousel\";\r\nimport \"@brainhubeu/react-carousel/lib/style.css\";\r\nimport ReactPlayer from 'react-player'\r\n\r\n/**\r\n * This component showing single event returned from APIs and set the event (images , vedios) in carousal\r\n * @component\r\n * @see http://sadagaat-uk.org/event/2865 \r\n */\r\n\r\nclass SinglEvent extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      event: [],\r\n      allMedia: [],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This function call when component mounted return specific event  \r\n   * @example event with id = 2865\r\n   * @returns void set the event details in the state\r\n   */\r\n  async componentDidMount() {\r\n    // get event id from props.match.params\r\n    let id = this.props.match.params.event_id;\r\n    await axios\r\n      .get(`${address()}events/${id}`, {\r\n        headers: { \"accept-language\": `${i18n.language}` },\r\n      })\r\n\r\n      .then((response) => {\r\n        const event = response.data;\r\n        this.setState({ event });\r\n        // call function to fill event media(images and videos)\r\n        this.fillMediaArray();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n   \r\n  }\r\n/**\r\n   * This function call when component receive props  like language \r\n   * @example change language from 'ar' to 'en'\r\n   * @returns void set the event details in the state\r\n   */\r\n  async componentWillReceiveProps() {\r\n    let id = this.state.event.id;\r\n\r\n    axios\r\n      .get(`${address()}events/${id}`, {\r\n        headers: { \"accept-language\": `${i18n.language}` },\r\n      })\r\n\r\n      .then((response) => {\r\n        const event = response.data;\r\n        this.setState({ event });\r\n    // call function to fill event media(images and videos)\r\n        this.fillMediaArray();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  }\r\n  /**\r\n   * This function joine event videos  and images arrays in one array AllMedia\r\n   * @returns void fill the state \r\n   */\r\n\r\n  fillMediaArray = () => {\r\n    const event_images = this.state.event.images;\r\n    const event_videos = this.state.event.video;\r\n    const allMedia = [];\r\n//check if event has images\r\n    if (event_images.length > 0) {\r\n      event_images.map((image) => {\r\n        // push images in all media array add new propartity type to object\r\n        allMedia.push({\r\n          type: \"image\",\r\n          id: image.id,\r\n          name: image.name,\r\n        });\r\n      });\r\n    }\r\n// check if event has videos\r\n    if (event_videos.length > 0) {\r\n      event_videos.map((video) => {\r\n// push videos in all media array add new propartity type to object\r\n        allMedia.push({\r\n          type: \"video\",\r\n          id: video.id,\r\n          name: video.name,\r\n        });\r\n      });\r\n    }\r\n    //fill state with all media array\r\n    this.setState({ allMedia });\r\n  };\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const event = this.state.event;\r\n    const allMedia = this.state.allMedia;\r\n    return (\r\n      <div class=\"main-content\">\r\n        <Header name={t(\"Events\")}  coverImage = {'events-bg-img'}/>\r\n\r\n        <section>\r\n          <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-7\">\r\n                <h2 class=\"text-theme-colored \">{event.name}</h2>\r\n                <div class=\"entry-header\">\r\n                  {/* {check if all media has images or video if there is one image its will not display the default image insted of carousal} */}\r\n                  {allMedia.length > 0 ? (\r\n                    <Carousel\r\n                      slidesPerScroll={1}\r\n                      rtl\r\n                      arrowLeft={\r\n                        <i\r\n                          className=\"fa fa-chevron-right fa-2x\"\r\n                          style={{ margin: \"10px\" }}\r\n                        />\r\n                      }\r\n                      arrowRight={\r\n                        <i\r\n                          className=\"fa fa-chevron-left fa-2x\"\r\n                          style={{ margin: \"10px\" }}\r\n                        />\r\n                      }\r\n                      addArrowClickHandler\r\n                      // animationSpeed={1000}\r\n                      infinite\r\n                      clickToChange\r\n                      centered\r\n                      breakpoints={{\r\n                        1000: {\r\n                          // these props will be applied when screen width is less than 1000px\r\n                          slidesPerPage: 2,\r\n                          clickToChange: false,\r\n                          centered: false,\r\n\r\n                          infinite: false,\r\n                        },\r\n                        500: {\r\n                          slidesPerPage: 1,\r\n                          slidesPerScroll: 1,\r\n                          clickToChange: false,\r\n                          centered: false,\r\n                          animationSpeed: 2000,\r\n                          infinite: false,\r\n                        },\r\n                      }}\r\n                    >\r\n                      {/* {looping throuh all media  and check the type if its image or video} */}\r\n                      {allMedia.map((media) =>\r\n                        media.type === \"image\" ? (\r\n                          <div\r\n                            class=\"post-thumb thumb\"\r\n                            style={{ mxaHeight: \"500px\" }}\r\n                          >\r\n                            <img\r\n                              src={`${address()}events/${media.name}/image`}\r\n                              className=\"img-fullwidth img-responsive\"\r\n                              alt=\"\"\r\n                              style={{ height: \"400px\" }}\r\n                            />\r\n                          </div>\r\n                        ) : (\r\n                          <div>\r\n                            {/* {to display video} */}\r\n                            <ReactPlayer \r\n                                      controls = {true}\r\n                                      playIcon\r\n                                      className=\"img-fullwidth img-responsive\"\r\n                                      url = {`${address()}events/${media.name}/video`}\r\n                                       />\r\n                        </div>\r\n                        )\r\n                      )}\r\n                    </Carousel>\r\n                  ) : (\r\n                    <div\r\n                      class=\"post-thumb thumb\"\r\n                      style={{ mxaHeight: \"500px\" }}\r\n                    >\r\n                      <img\r\n                        src={`${address()}events/${event.id}/image`}\r\n                        className=\"img-fullwidth img-responsive\"\r\n                        alt=\"\"\r\n                        style={{ height: \"400px\" }}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-5\">\r\n                <ul>\r\n                  <li>\r\n                    <h4>{t(\"Topic\")}:</h4>\r\n                    <p>{event.name}</p>\r\n                  </li>\r\n                  <li>\r\n                    <h4>{t(\"Description\")}:</h4>\r\n                    <p>{event.description}</p>\r\n                  </li>\r\n                  <li>\r\n                    <h4>{t(\"Start Date\")}:</h4>\r\n                    <p>{event.startDate}</p>\r\n                  </li>\r\n                  <li>\r\n                    <h4>{t(\"End Date\")}:</h4>\r\n                    <p>{event.endDate}</p>\r\n                  </li>\r\n                  <li>\r\n                    <h4>{t(\"Location\")}:</h4>\r\n                    <p>{event.locationName}</p>\r\n                  </li>\r\n\r\n                  <li>\r\n                    <h5></h5>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withTranslation()(SinglEvent);\r\n"],"sourceRoot":""}